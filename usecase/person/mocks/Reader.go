// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/PicPay/go-test-workshop/entity"
	mock "github.com/stretchr/testify/mock"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *Reader) Get(id entity.ID) (*entity.Person, error) {
	ret := _m.Called(id)

	var r0 *entity.Person
	if rf, ok := ret.Get(0).(func(entity.ID) *entity.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Reader) List() ([]*entity.Person, error) {
	ret := _m.Called()

	var r0 []*entity.Person
	if rf, ok := ret.Get(0).(func() []*entity.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: query
func (_m *Reader) Search(query string) ([]*entity.Person, error) {
	ret := _m.Called(query)

	var r0 []*entity.Person
	if rf, ok := ret.Get(0).(func(string) []*entity.Person); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewReaderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReader(t NewReaderT) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
