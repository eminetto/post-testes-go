// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	weather "github.com/PicPay/go-test-workshop/weather"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Get provides a mock function with given fields: lat, long
func (_m *UseCase) Get(lat string, long string) (*weather.Weather, error) {
	ret := _m.Called(lat, long)

	var r0 *weather.Weather
	if rf, ok := ret.Get(0).(func(string, string) *weather.Weather); ok {
		r0 = rf(lat, long)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weather.Weather)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(lat, long)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewUseCaseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t NewUseCaseT) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
